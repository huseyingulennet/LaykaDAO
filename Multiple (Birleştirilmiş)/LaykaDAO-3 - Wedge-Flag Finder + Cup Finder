// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © husseyingulen

//@version=5
indicator(title='LaykaDAO-3 - Wedge/Flag Finder + Cup Finder', shorttitle='LaykaDAO-3', overlay=true, max_bars_back=500)


/////////////////////////// wedge and flag finderbaslama 

import HeWhoMustNotBeNamed/zigzag/14 as zg
import HeWhoMustNotBeNamed/enhanced_ta/14 as eta
import HeWhoMustNotBeNamed/arrayutils/17 as pa

wedgeSize = input.int(5, 'Wedge Length', options=[5,6], group='=== WEDGE AND FLAG FINDER SETTINGS ===',
         tooltip='Defines how many pivots a wedge should comply. Options are 5 and 6 with 5 being default')
theme = input.string('Dark', title='Theme', options=['Light', 'Dark'], group='=== WEDGE AND FLAG FINDER SETTINGS ===',
         tooltip='Chart theme settings. Line and label colors are generted based on the theme settings. If dark theme is selected, '+
         'lighter colors are used and if light theme is selected, darker colors are used.')
avoidOverlap = input.bool(true, 'Suppress Overlap', group='=== WEDGE AND FLAG FINDER SETTINGS ===',
         tooltip='Avoids plotting wedge if there is an existing wedge at starting point. This does not avoid nesting wedges (Wedge within wedge)')
drawZigzag = input.bool(true, 'Draw Zigzag', group='=== WEDGE AND FLAG FINDER SETTINGS ===', tooltip='Draw zigzag lines and mark pivots within wedge')

showZigZag1 = input.bool(true, title='L1', group='Zigzag', inline='z1')
zigzag1Length = input.int(5, step=5, minval=3, title='', group='Zigzag', inline='z1')

showZigZag2 = input.bool(true, title='L2', group='Zigzag', inline='z1')
zigzag2Length = input.int(8, step=5, minval=3, title='', group='Zigzag', inline='z1')

showZigZag3 = input.bool(true, title='L3', group='Zigzag', inline='z2')
zigzag3Length = input.int(13, step=5, minval=3, title='', group='Zigzag', inline='z2')

showZigZag4 = input.bool(true, title='L4', group='Zigzag', inline='z2')
zigzag4Length = input.int(21, step=5, minval=3, title='', group='Zigzag', inline='z2')

applyAngleDiff = input.bool(false, 'Angle Difference', inline='ad', group='Angles')
minAngleDiff = input.int(5, '', minval=0, maxval=10, inline='ad', step=5, group='Angles')
maxAngleDiff = input.int(20, '', minval=10, maxval=90, inline='ad', step=5, group='Angles', tooltip='Show patterns where angle between trend lines falls under the selected range')

applyAngleLimit = input.bool(false, 'Angle Range    ', inline='ar', group='Angles')
minAngleRange = input.int(10, '', minval=0, maxval=20, inline='ar', step=5, group='Angles')
maxAngleRange = input.int(60, '', minval=20, maxval=90, inline='ar', step=5, group='Angles', tooltip='Show patterns where at least one of the trend line is within the given angle range')

var themeColors = theme=="Dark"? array.from(
         color.rgb(251, 244, 109),
         color.rgb(141, 186, 81),
         color.rgb(74, 159, 245),
         color.rgb(255, 153, 140),
         color.rgb(255, 149, 0),
         color.rgb(0, 234, 211),
         color.rgb(167, 153, 183),
         color.rgb(255, 210, 113),
         color.rgb(119, 217, 112),
         color.rgb(95, 129, 228),
         color.rgb(235, 146, 190),
         color.rgb(198, 139, 89),
         color.rgb(200, 149, 149),
         color.rgb(196, 182, 182),
         color.rgb(255, 190, 15),
         color.rgb(192, 226, 24),
         color.rgb(153, 140, 235),
         color.rgb(206, 31, 107),
         color.rgb(251, 54, 64),
         color.rgb(194, 255, 217),
         color.rgb(255, 219, 197),
         color.rgb(121, 180, 183)
         ) : array.from(
         color.rgb(61, 86, 178),
         color.rgb(57, 163, 136),
         color.rgb(250, 30, 14),
         color.rgb(169, 51, 58),
         color.rgb(225, 87, 138),
         color.rgb(62, 124, 23),
         color.rgb(244, 164, 66),
         color.rgb(134, 72, 121),
         color.rgb(113, 159, 176),
         color.rgb(170, 46, 230),
         color.rgb(161, 37, 104),
         color.rgb(189, 32, 0),
         color.rgb(16, 86, 82),
         color.rgb(200, 92, 92),
         color.rgb(63, 51, 81),
         color.rgb(114, 106, 149),
         color.rgb(171, 109, 35),
         color.rgb(247, 136, 18),
         color.rgb(51, 71, 86),
         color.rgb(12, 123, 147),
         color.rgb(195, 43, 173)
         )


maxPatternsReference = 10

var aBarArray = array.new_int()
var bBarArray = array.new_int()
var cBarArray = array.new_int()
var dBarArray = array.new_int()
var eBarArray = array.new_int()
var fBarArray = array.new_int()
var xBarArray = array.new_int()

f_angle(a, b, loopback) =>
    rad2degree = 180 / math.pi
    ang = rad2degree * math.atan((a - b)/(2*math.sum(ta.tr, loopback+1)/(loopback+1)))
    ang
    

add_new_wedge(a,b,c,d,e,f,aBar,bBar,cBar,dBar,eBar,fBar,l1Angle, l2Angle, zgColor, wedgeSize=5)=>
    dir = a>b? 1: -1

    pa.unshift(fBarArray, fBar, maxPatternsReference)
    pa.unshift(aBarArray, aBar, maxPatternsReference)
    pa.unshift(bBarArray, bBar, maxPatternsReference)
    pa.unshift(cBarArray, cBar, maxPatternsReference)
    pa.unshift(dBarArray, dBar, maxPatternsReference)
    pa.unshift(eBarArray, eBar, maxPatternsReference)

    if(drawZigzag)
        ab = line.new(bBar, b, aBar, a)
        bc = line.new(cBar, c, bBar, b)
        cd = line.new(dBar, d, cBar, c)
        de = line.new(eBar, e, dBar, d)
        
        aLbl = label.new(aBar, a, '5', style=label.style_none, yloc=dir>0?yloc.abovebar:yloc.belowbar, textcolor=zgColor)
        bLbl = label.new(bBar, b, '4', style=label.style_none, yloc=dir<0?yloc.abovebar:yloc.belowbar, textcolor=zgColor)
        cLbl = label.new(cBar, c, '3', style=label.style_none, yloc=dir>0?yloc.abovebar:yloc.belowbar, textcolor=zgColor)
        dLbl = label.new(dBar, d, '2', style=label.style_none, yloc=dir<0?yloc.abovebar:yloc.belowbar, textcolor=zgColor)
        eLbl = label.new(eBar, e, '1', style=label.style_none, yloc=dir>0?yloc.abovebar:yloc.belowbar, textcolor=zgColor)
        if(wedgeSize == 6)
            ef = line.new(fBar, f, eBar, e)
            fLbl = label.new(fBar, f, '0', style=label.style_none, yloc=dir<0?yloc.abovebar:yloc.belowbar, textcolor=zgColor)
    

wedgeLine(l1StartX, l1StartY, l1EndX, l1EndY, l2StartX, l2StartY, l2EndX, l2EndY, zgColor)=>
    l1t = line.new(l1StartX, l1StartY, l1EndX, l1EndY, color=zgColor, extend=extend.both)
    l2t = line.new(l2StartX, l2StartY, l2EndX, l2EndY, color=zgColor, extend=extend.both)
    
    startBar = math.min(l2StartX, l1StartX)
    endBar = l1EndX
    l1Start = line.get_price(l1t, startBar)
    l1End = line.get_price(l1t, endBar)
    l2Start = line.get_price(l2t,startBar)
    l2End = line.get_price(l2t, endBar)

    line.set_extend(l1t, extend.none)
    line.set_extend(l2t, extend.none)
    line.set_x1(l1t, startBar)
    line.set_y1(l1t, l1Start)
    line.set_x2(l1t, endBar)
    line.set_y2(l1t, l1End)
    
    line.set_x1(l2t, startBar)
    line.set_y1(l2t, l2Start)
    line.set_x2(l2t, endBar)
    line.set_y2(l2t, l2End)
    
    l1Angle = f_angle(l1End, l1Start, endBar-startBar)
    l2Angle = f_angle(l2End, l2Start, endBar-startBar)
    
    l1Diff = math.abs(l1Start-l1End)
    l2Diff = math.abs(l2Start-l2End)
        
    [l1t, l2t, l1Angle, l2Angle, l1Diff, l2Diff]
    
find_wedge(a,b,c,d,e,f,aBar,bBar,cBar,dBar,eBar,fBar,zigzagpivots, zigzagpivotbars, fIndex, wedgeSize=6)=>
    existingPattern = false
    lastPivot = wedgeSize == 6? f : e
    lastPivotBar = wedgeSize == 6? fBar : eBar
    llastPivot = wedgeSize == 6? e : d
    for i=0 to array.size(aBarArray)==0? na: array.size(aBarArray)-1
        commonPivots = (array.get(aBarArray, i) == aBar ? 1 : 0) +
                         (array.get(bBarArray, i) == bBar ? 1 : 0) +
                         (array.get(cBarArray, i) == cBar ? 1 : 0) +
                         (array.get(dBarArray, i) == dBar ? 1 : 0) +
                         (array.get(eBarArray, i) == eBar ? 1 : 0) +
                         (wedgeSize == 6 and array.get(fBarArray, i) == fBar ? 1 : 0)
        
        if(commonPivots >=2) or (avoidOverlap and lastPivotBar < array.get(aBarArray,i) and lastPivotBar > array.get(fBarArray, i))
            existingPattern := true
            break
    
    if(not existingPattern)
        aRatio = math.abs(a-b)/math.abs(b-c)
        bRatio = math.abs(b-c)/math.abs(c-d)
        cRatio = math.abs(c-d)/math.abs(d-e)
        dRatio = math.abs(d-e)/math.abs(e-f)

        zgColor = array.pop(themeColors)
        [l1t, l2t, l1Angle, l2Angle, l1Diff, l2Diff] = wedgeLine(eBar, e, aBar, a, wedgeSize == 6?fBar:dBar, wedgeSize == 6?f:d, bBar, b, zgColor)
        
        isType1Wedge = aRatio >=1 and bRatio < 1 and cRatio >= 1 and (dRatio < 1 or wedgeSize==5) and l1Diff < l2Diff
        isType2Wedge = aRatio <1 and bRatio >= 1 and cRatio < 1 and (dRatio >=1 or wedgeSize==5) and l1Diff > l2Diff
        
        angleDiff = math.abs(l1Angle-l2Angle)
        angleDiffInRange = (angleDiff >= minAngleDiff and angleDiff <= maxAngleDiff) or not applyAngleDiff
        angleInRange = (math.max(math.abs(l1Angle), math.abs(l2Angle)) >= minAngleRange and math.min(math.abs(l1Angle), math.abs(l2Angle)) <= maxAngleRange) or not applyAngleLimit
        isWedge = (isType1Wedge or isType2Wedge) and angleDiffInRange and angleInRange
        
        if(isWedge)
            for i = aBar to lastPivotBar
                l = low[bar_index-i]
                h = high[bar_index-i]
                l1Price = line.get_price(l1t, i)
                l2Price = line.get_price(l2t, i)
                if(h < math.min(l1Price, l2Price) or l > math.max(l1Price, l2Price))
                    isWedge := false
                    break
                if(i == cBar and (l1Price > h or l1Price < l))
                    isWedge := false
                    break
                if(i == dBar and (l2Price > h or l2Price < l))
                    isWedge := false
                    break

        if isWedge
            wedgeType = isType1Wedge? 1 : 2
            add_new_wedge(a,b,c,d,e,f,aBar,bBar,cBar,dBar,eBar,fBar,l1Angle, l2Angle, zgColor, wedgeSize)
            length = array.size(zigzagpivots)
            xIndexes = pa.get_trend_series(zigzagpivots, fIndex, length)
            isFlag = false
            for i=array.size(xIndexes)-1 to 0
                xIndex = array.get(xIndexes, i)
                x = array.get(zigzagpivots, xIndex)
                xBar = array.get(zigzagpivotbars, xIndex)
            
                flagRatio = math.abs(lastPivot-line.get_price(wedgeSize == 6?l1t:l2t, lastPivotBar))/math.abs(x-lastPivot)
                
                isFlag := flagRatio < 0.618 and (lastPivot-x)/math.abs(lastPivot-x) == (lastPivot-(wedgeSize == 6?b:a))/math.abs(lastPivot-(wedgeSize == 6?b:a))
                if(isFlag)
                    lFlag = line.new(xBar, x, lastPivotBar, lastPivot, color=zgColor, extend=extend.none)
                    dir = x > lastPivot? 1 : -1
                    label.new(xBar, x, 'Flag', style=dir>0?label.style_label_down:label.style_label_up, yloc=yloc.price, color=zgColor, textcolor=color.black)
                    break
            if(not isFlag)
                dir = lastPivot > llastPivot? 1 : -1
                label.new(fBar, f, 'Wedge', style=dir>0?label.style_label_down:label.style_label_up, yloc=yloc.price, color=zgColor, textcolor=color.black)
            
            alert('New '+(isFlag?'Flag':'Wedge')+' pattern found')
            array.unshift(themeColors, zgColor)
            true
        else
            line.delete(l1t)
            line.delete(l2t)
            array.push(themeColors, zgColor)
            false
            
scan_patterns(startIndex, newPivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)=>
    length = array.size(zigzagpivots)
    numberOfPivots=5
    newLastABar = lastABar
    if(length >= startIndex+numberOfPivots+1 and newPivot)
        a = array.get(zigzagpivots, startIndex)
        aBar = array.get(zigzagpivotbars, startIndex)
        aIndex = startIndex
        lastDir = array.get(zigzagpivotdirs, startIndex)
        if(aBar!=lastABar)
            newLastABar := aBar
            b = array.get(zigzagpivots, startIndex+1)
            bBar = array.get(zigzagpivotbars, startIndex+1)
            c = array.get(zigzagpivots, startIndex+2)
            cBar = array.get(zigzagpivotbars, startIndex+2)
            d = array.get(zigzagpivots, startIndex+3)
            dBar = array.get(zigzagpivotbars, startIndex+3)
            e = array.get(zigzagpivots, startIndex+4)
            eBar = array.get(zigzagpivotbars, startIndex+4)
            f = e
            fBar = eBar
            if(wedgeSize == 6)
                f := array.get(zigzagpivots, startIndex+5)
                fBar := array.get(zigzagpivotbars, startIndex+5)
            find_wedge(a,b,c,d,e,f,aBar,bBar,cBar,dBar,eBar,fBar,zigzagpivots, zigzagpivotbars, startIndex+wedgeSize-1,wedgeSize)
    newLastABar

startIndex = 0
if(showZigZag1)
    [zigzagpivots, zigzagpivotbars, zigzagpivotdirs, zigzagpivotratios, _, _, _, _, _, newPivot, doublePivot] = zg.czigzag(zigzag1Length)

    var lastABar = 0
    lastABar := scan_patterns(startIndex+1, doublePivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)
    lastABar := scan_patterns(startIndex, newPivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)

if(showZigZag2)
    [zigzagpivots, zigzagpivotbars, zigzagpivotdirs, zigzagpivotratios, _, _, _, _, _, newPivot, doublePivot] = zg.czigzag(zigzag2Length)

    var lastABar = 0
    lastABar := scan_patterns(startIndex+1, doublePivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)
    lastABar := scan_patterns(startIndex, newPivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)

if(showZigZag3)
    [zigzagpivots, zigzagpivotbars, zigzagpivotdirs, zigzagpivotratios, _, _, _, _, _, newPivot, doublePivot] = zg.czigzag(zigzag3Length)

    var lastABar = 0
    lastABar := scan_patterns(startIndex+1, doublePivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)
    lastABar := scan_patterns(startIndex, newPivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)

if(showZigZag4)
    [zigzagpivots, zigzagpivotbars, zigzagpivotdirs, zigzagpivotratios, _, _, _, _, _, newPivot, doublePivot] = zg.czigzag(zigzag4Length)

    var lastABar = 0
    lastABar := scan_patterns(startIndex+1, doublePivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)
    lastABar := scan_patterns(startIndex, newPivot, zigzagpivots, zigzagpivotbars, zigzagpivotratios, zigzagpivotdirs, lastABar)


/////////////////////////// wedge and flag finderbitis


/////////////////////////// cup finder baslangic

loopback = input.int(defval=150, title='Number of Bars to search', minval=30, maxval=250, group='=== CUP FINDER SETTINGS ===')
widthr = input.float(defval=5., title='Channel Width of the Cup', minval=1, group='=== CUP FINDER SETTINGS ===')
check_hc = input.string(defval='Close', title='Source for Breakout', options=['Close', 'High/Low'], group='=== CUP FINDER SETTINGS ===')
include_rate = input.float(75., title='Contained Bar Rate %', minval=10, maxval=100, group='=== CUP FINDER SETTINGS ===') / 100
show_channel = input(false, title='Show Channels of Cups', group='=== CUP FINDER SETTINGS ===')
no_label = input(true, title='Don\'t Show Labels', group='=== CUP FINDER SETTINGS ===')
remove_old_lines = input(true, title='Remove Old Lines', group='=== CUP FINDER SETTINGS ===')
remove_old_labels = input(true, title='Remove Old Labels', group='=== CUP FINDER SETTINGS ===' )
bullcolor = input.color(defval=color.lime, title='Colors', inline='colors', group='=== CUP FINDER SETTINGS ===')
bearcolor = input.color(defval=color.red, title='', inline='colors', group='=== CUP FINDER SETTINGS ===')

// used for calculation&drawing of circles
float width = (ta.highest(292) - ta.lowest(292)) / 100
float uwidth = width * widthr
bool highestbar = ta.highestbars(30) == 0
bool lowestbar = ta.lowestbars(30) == 0
float bullsrc = check_hc == 'Close' ? close : high
float bearsrc = check_hc == 'Close' ? close : low

float hh = 0.
float lasthh = 0.
int ind = 0
bool bull = false
for x = 1 to loopback by 1
    lasthh := math.max(lasthh, high[x])
    if bullsrc <= lasthh
        break

    if x >= 20 and bullsrc > high[x] and close[1] < high[x] and high[x] >= lasthh and highestbar[x]
        hh := high[x]
        ind := x
        bull := true
        bull

float ll = 0.
lastll = ta.highest(292)
if ind == 0
    for x = 1 to loopback by 1
        lastll := math.min(lastll, low[x])
        if bearsrc >= lastll
            break

        if x >= 20 and bearsrc < low[x] and close[1] > low[x] and low[x] <= lastll and lowestbar[x]
            ll := low[x]
            ind := x
            ind

Round(val) =>
    math.round(val / syminfo.mintick) * syminfo.mintick

var cup_lines = array.new_line(0)
var label cup_label = na
levs = array.new_float(0)
bullish_cup = false
bearish_cup = false
int included = na
if ind != 0
    float pow_radius = math.pow(ind / 2, 2)
    end = math.round((ind - ind % 2) / 2)
    if ind % 2 == 0
        array.push(levs, bull ? hh - math.sqrt(pow_radius) * width : ll + math.sqrt(pow_radius) * width)

    for x = 1 to end by 1
        ycoord = math.sqrt(pow_radius - math.pow(x, 2)) * width
        array.push(levs, bull ? hh - ycoord : ll + ycoord)
        array.unshift(levs, bull ? hh - ycoord : ll + ycoord)
    if ind % 2 == 1
        array.push(levs, bull ? hh : ll)
        array.unshift(levs, bull ? hh : ll)

    in_cnt = 0
    for x = 0 to array.size(levs) - 1 by 1
        if math.min(array.get(levs, x) + uwidth, high[x]) - math.max(array.get(levs, x) - uwidth, low[x]) > 0
            in_cnt += 1
            in_cnt

    if in_cnt / (ind + 1) >= include_rate
        if not no_label
            if remove_old_labels
                label.delete(cup_label)
            cup_label := label.new(bar_index, array.get(levs, 0), text='Cup\nRadius = ' + str.tostring(Round(width * ind / 2)) + '\nIncluded = ' + str.tostring(100 * in_cnt / (ind + 1), '#.#') + '%', color=bull ? bullcolor : bearcolor, textcolor=bull ? color.black : color.white, textalign=text.align_left, style=bull ? label.style_label_lower_right : label.style_label_upper_right)
            cup_label

        if remove_old_lines and array.size(cup_lines) > 0
            for x = 0 to array.size(cup_lines) - 1 by 1
                line.delete(array.get(cup_lines, x))

        array.push(cup_lines, line.new(x1=bar_index, y1=array.get(levs, 0), x2=bar_index - ind + 1, y2=array.get(levs, 0), color=bull ? bullcolor : bearcolor, style=line.style_dashed))
        xloc = ind
        for x = 0 to array.size(levs) - 2 by 1
            array.push(cup_lines, line.new(x1=bar_index - xloc, y1=array.get(levs, x), x2=bar_index - xloc + 1, y2=array.get(levs, x + 1), color=bull ? bullcolor : bearcolor, width=3))
            if show_channel and x % 2 == 0 and x > 0 and x < array.size(levs) - 2
                array.push(cup_lines, line.new(x1=bar_index - xloc, y1=array.get(levs, x) + uwidth, x2=bar_index - xloc + 1, y2=array.get(levs, x + 1) + uwidth, color=bull ? bullcolor : bearcolor))
                array.push(cup_lines, line.new(x1=bar_index - xloc, y1=array.get(levs, x) - uwidth, x2=bar_index - xloc + 1, y2=array.get(levs, x + 1) - uwidth, color=bull ? bullcolor : bearcolor))

            xloc -= 1
            xloc

        included := math.round(100 * in_cnt / (ind + 1))
        if bull
            bullish_cup := true
            bullish_cup
        else
            bearish_cup := true
            bearish_cup

plot(included, title='included', display=display.none)
alertcondition(bullish_cup, title='Bullish Cup Found', message='Bullish Cup Found, Included:{{plot("included")}}')
alertcondition(bearish_cup, title='Bearish Cup Found', message='Bearish Cup Found, Included:{{plot("included")}}')
alertcondition(bullish_cup or bearish_cup, title='Cup Found', message='Cup Found, Included:{{plot("included")}}')

/////////////////////////// cup finder bitiss
